#include<iostream>
#include<queue>
#include<iomanip>
#include<functional>
#include<cmath>
using namespace std;
#define N 3

int row[] = { 1, 0, -1, 0 };
int col[] = { 0, -1, 0, 1 };
int answer2[3][3] = { { 1, 2, 3 },{ 4, 5, 6 },{ 7, 8, 0 } };

struct Node {
	int data[N][N];
	Node * parent;
	int x, y;
	int level = 0;
	int totalCost;

};

struct comp
{
	bool operator()(const Node* lhs, const Node* rhs) const
	{
		return (lhs->totalCost) > (rhs->totalCost);
	}
};

bool arrays_equal(int array1[3][3], int array2[3][3]) {
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			if (array1[i][j] != array2[i][j])
				return false;
		}
	}

	return true;
}

int manhattanDistance(int array[3][3]) {
	int totalDistance = 0;
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			int number = array[i][j];
			if (number != 0) {  // dont compute zero in manhattan distance
				int expectedX = (number - 1) / 3;
				int expectedY = (number - 1) % 3;
				int deltaX = i - expectedX;
				int deltaY = j - expectedY;
				//add the two together
				totalDistance += (abs(deltaX) + abs(deltaY));
			}
		}

	}
	return totalDistance;
}

Node * newNode(int data[N][N], int x, int y, int newX, int newY, Node* parent) {
	Node* tempNode = new Node;
	tempNode->parent = parent;

	memcpy(tempNode->data, data, sizeof tempNode->data);

	//swap(tempNode->data[x][y], tempNode->data[newX][newY]);  
	//need a swapping function

	int number = tempNode->data[newX][newY];
	tempNode->data[newX][newY] = tempNode->data[x][y];
	tempNode->data[x][y] = number;


	tempNode->x = newX;
	tempNode->y = newY;

	if (parent) {
		tempNode->level = ++(parent->level);
	}


	tempNode->totalCost = manhattanDistance(tempNode->data) + tempNode->level;

	return tempNode;
}


bool isValidNode(int x, int y) {
	//need to write this function
	if (x <= 2 && x >= 0 && y <= 2 && y >= 0) {
		return true;
	}
	else
		return false;
}

bool contains(Node * tempNode, vector<Node*> explored) {
	for (int i = 0; i < explored.size(); i++) {
		return(arrays_equal(tempNode->data, explored[i]->data));
	}
	return false;
}


bool queue_contains(Node* tempNode, priority_queue<Node*, vector<Node*>, comp> frontier) {

	queue<Node*>temp;

	while (!frontier.empty()) {
		if (arrays_equal(frontier.top()->data, tempNode->data))
			return true;

		frontier.pop();
	}


	return false;
}

Node* queue_element(Node* tempNode, priority_queue<Node*, vector<Node*>, comp> frontier) {
	Node *node = new Node;
	while (!frontier.empty()) {
		node = frontier.top();
		if (arrays_equal(frontier.top()->data, tempNode->data))
			return tempNode;

		frontier.pop();
	}
	return NULL;
}


Node* ASearch(Node* initial) {

	vector<Node*> explored;
	priority_queue<Node*, vector<Node*>, comp> frontier;

	frontier.push(initial);

	while (!frontier.empty()) {
		Node * tempNode = frontier.top();
		frontier.pop();
		
		cout << endl;
		if (arrays_equal(tempNode->data, answer2)) {
			return tempNode;
		}
			

		explored.push_back(tempNode);

		for (int i = 0; i < 4; i++) {
			//create a node for each child
			if (isValidNode(tempNode->x + row[i], tempNode->y + col[i])) {

				Node * child = newNode(tempNode->data, tempNode->x, tempNode->y, tempNode->x + row[i], tempNode->y + col[i], tempNode);
				//have to grab the node from the frontier
				Node * sameNode = queue_element(child, frontier);

				//need to write a new function to traverse the priority queue to check if they contain them
				if ((!contains(child, explored) && !queue_contains(child, frontier))) {
					frontier.push(child);
				}

				else if (queue_contains(child, frontier) && (child->totalCost < sameNode->totalCost)) {
					//update the node, child.cost only the second comment
					//delete it, then place in child
					*sameNode = *child;
					delete child;
				}


			}
		}
	}
	return NULL;
}

//have to do it recursively
void displaySolution(Node* tempNode)
{
	if (tempNode == NULL)
		return;
	displaySolution(tempNode->parent);
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			cout << (tempNode->data[i][j]);
		}
		cout << endl;
	}
	cout << endl;

}

int main() {

	//have to write the functions to check if they are contained
	//
	int input[3][3] = { { 1,8,2 },{ 0,4,3 },{ 7,6,5 } };
	//create a fixed state to plug in 

	int x = 1;
	int y = 0;

	Node* tempNode = newNode(input, x, y, x, y, NULL);


	Node *solution = ASearch(tempNode);

	if (!solution)
		cout << "Not solvable" << endl;
	else
		displaySolution(solution);


	return 0;
}


